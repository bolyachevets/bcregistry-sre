name: Frontend CD

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      node_version:
        type: string
        default: "21"
      pnpm_version:
        type: string
        default: "latest-9"
      app_name:
        required: true
        type: string
      working_directory:
        type: string
        default: "."
      redeploy:
        type: string
        default: "false"
    secrets:
      WORKLOAD_IDENTIFY_POOLS_PROVIDER:
        required: true
      GCP_SERVICE_ACCOUNT:
        required: true

jobs:
  setup:
    # Only allow run the CD flow in protected branch
    if: github.ref_protected == true

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    # Allow add the tag in the repo.
    # Add "id-token" with the intended permissions.
    permissions:
      contents: "write"
      id-token: "none"

    outputs:
      TARGETS: ${{ steps.setenv.outputs.TARGETS }}
      TARGET: ${{ steps.setenv.outputs.TARGET }}
      TARGET_FROM: ${{ steps.setenv.outputs.TARGET_FROM }}
      PIPELINE: ${{ steps.setenv.outputs.PIPELINE }}

    steps:
      # Checkout code
      - name: Checkout out the code
        uses: actions/checkout@v4

      - name: Setup targets
        uses: bcgov/bcregistry-sre/.github/actions/setup-deployment-target@main
        with:
          environment: ${{ inputs.target }}
          app_name: ${{ inputs.app_name }}

      - id: setenv
        run: |
          echo "TARGETS=${{ env.DEPLOY_TARGETS }}" >> "$GITHUB_OUTPUT"
          echo "TARGET=${{ env.DEPLOY_TARGET }}" >> "$GITHUB_OUTPUT"
          echo "TARGET_FROM=${{ env.DEPLOY_TARGET_FROM }}" >> "$GITHUB_OUTPUT"
          echo "PIPELINE=${{ env.DEPLOY_PIPELINE }}" >> "$GITHUB_OUTPUT"

  deploy:
    needs: setup
    runs-on: ubuntu-latest

    environment:
      name: "${{ needs.setup.outputs.TARGET }}"

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    # Allow add the tag in the repo.
    # Add "id-token" with the intended permissions.
    permissions:
      contents: "write"
      id-token: "write"

    steps:
      # Checkout code
      - name: Checkout out the code
        uses: actions/checkout@v4

      # Copy cloud build, Dockerfile, firebase files to the build
      - name: Copy deployment files
        uses: bcgov/bcregistry-sre/.github/actions/frontend-deploy@main
        with:
          working-directory: ${{ inputs.working_directory }}

      # GCP authentication
      - name: "Authenticate to Google Cloud"
        id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTIFY_POOLS_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Trigger Cloud Deploy
      - name: Deploy with Async + Verification
        working-directory: ${{ inputs.working_directory }}
        run: |
          # 1. Submit build asynchronously (reusing ONLY existing substitutions)
          SHORT_SHA=$(git rev-parse --short HEAD)
          gcloud builds submit \
            --region=northamerica-northeast1 \
            --async \
            --substitutions \
              _SHORT_SHA=$SHORT_SHA,\
              _NODE_VERSION="${{ inputs.node_version }}",\
              _PNPM_VERSION="${{ inputs.pnpm_version }}",\
              _APP_NAME="${{ inputs.app_name }}",\
              _DEPLOYMENT_ENV="${{ needs.setup.outputs.TARGET }}",\
              _DEPLOYMENT_ENV_FROM="${{ needs.setup.outputs.TARGET_FROM }}",\
              _REDEPLOY="${{ inputs.redeploy}}" \
            --config cloudbuild.yaml

          # 2. Get Build ID using existing unique substitutions
          BUILD_ID=$(gcloud builds list \
            --filter="substitutions._APP_NAME='${{ inputs.app_name }}' \
              AND substitutions._DEPLOYMENT_ENV='${{ needs.setup.outputs.TARGET }}'" \
            --sort-by="~create_time" \
            --format="value(ID)" \
            --limit=1)

          echo "Build ID: $BUILD_ID"
          echo "Console URL: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID"

          # 3. Fail-fast verification (15m timeout)
          timeout 15m gcloud builds log $BUILD_ID --stream || {
            echo "::warning::Log streaming timed out - checking final status"
            STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)")
            [ "$STATUS" = "SUCCESS" ] || { echo "::error::Build failed"; exit 1; }
            echo "::notice::Build succeeded despite log timeout"
          }
